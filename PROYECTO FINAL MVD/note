JSX
Es la extensiÃ³n de archivos que se usa en react donde podemos hacer html dentro de js facilitando el uso sacando
lo mejor de html css y js.

Virual DOM
Es una copia del DOM real y lo que hace es compararlo, asi cuando existe algun cambio no se tiene que renderizar
toda la pantalla si no solo lo que se cambio mejorando el desempeÃ±o de nuestra app, como lo comente antes esto es
por que se compara el Virtual DOM con el DOM Real encontrando los cambios.

Ciclo de vida
Este concepto es ampliamente conocido en la programaciÃ³n, en este curso vamos a conocer cual es el ciclo de vida
de los elementos que vamos a crear en react desde que nace, se combina hasta que muere

Estado
Esto es fundamental, ya que podemos ver los estados y ver como es el flujo de la informaciÃ³n entre componentes
a travez de un imputs, botones, interacciones entre otros elementos.

Eventos
Se desencadenan segÃºn las necesidades de nuestra app; desde un click, mover mouse, activar la pÃ¡gina.

Â¿QuÃ© es router en React?
Debido a que React es de tipo SPA(single page application), no recarga la pÃ¡gina cuando cambiamos de url.
Para ello, usamos router, que se encargarÃ¡ de administrar esta situaciÃ³n, donde en el momento que abras
el tweet, cambie la URL, pero todavÃ­a mantenga ese dinamismo y rapidez de una SPA.

---------------------React.useText---------------------
1. import React, {useState} from â€˜reactâ€™;

2. Crear const [uno, setUno] = useState(â€˜1â€™)
Donde â€˜unoâ€™ es la variable que modificara su estado, â€˜setUnoâ€™ es la funciÃ³n que modificara su estado al suceder X cosa, y â€˜1â€™ es el valor inicial que tendrÃ¡ esa variable

3. En el valor inicial o â€˜1â€™ puede ir: bool, numero, string, objeto o array.

4. Manejando el evento del elemento que modificara su estado, activaremos la funciÃ³n que recibirÃ¡ el evento y activara la funciÃ³n â€˜setUno( )â€™ para modificar su valor, ej: setUno(â€˜2â€™)

5. Siempre que se recargue la pÃ¡gina, el valor volverÃ¡ a su valor inicial!

//DocumentaciÃ³n: https://es.reactjs.org/
//Docs de la API ðŸ‘‰ https://api.escuelajs.co/docs/
//API para desarrollo ðŸ‘‰ https://api.escuelajs.co/api/v1/
//Postman: mG^*?kgdXnN&7P3

---------------------useContext---------------------
Context es una herramienta para pasar propiedades en un arbol de componentes de arriba hacia abjo sin tener que pasar por componentes intermedios.
Par usar context debemos importar dos cosas:
createContext -> Permite crear el contexto
useContext -> Este hook nos va permitir uusar contextos dentro de los componentes

createContext recibe un valor inicial que se va seleccionar en caso de no tener un provider. Puede ser cualquier valor (string, number, objeto, arrayâ€¦)
Â¿Que es un provider?
Es el encargado de poder pasar el contexto hacia los componentes hijos